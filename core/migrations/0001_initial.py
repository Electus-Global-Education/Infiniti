# Generated by Django 5.2.1 on 2025-05-30 11:01

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Publicly visible unique identifier.', unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['username'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Official name of the organization.', max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is this organization currently active on the platform?')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Organization',
                'verbose_name_plural': 'Organizations',
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='user',
            name='organization',
            field=models.ForeignKey(blank=True, help_text='The organization this user belongs to.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='users', to='core.organization'),
        ),
        migrations.CreateModel(
            name='RegisteredApplication',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Name of the application (unique within an organization).', max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('base_url', models.URLField(blank=True, help_text='Base URL of the external application.', max_length=255, null=True)),
                ('api_key', models.CharField(editable=False, help_text='Generated API key for this application.', max_length=128, unique=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is this application currently active?')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(help_text='The organization that owns this application.', on_delete=django.db.models.deletion.PROTECT, related_name='registered_applications', to='core.organization')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Registered Application',
                'verbose_name_plural': 'Registered Applications',
                'ordering': ['organization__name', 'name'],
                'abstract': False,
                'unique_together': {('organization', 'name')},
            },
        ),
        migrations.CreateModel(
            name='BasePrompt',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('prompt_text', models.TextField(help_text='The base prompt text. Use {{placeholders}} for variables.')),
                ('prompt_type', models.CharField(choices=[('SYSTEM', 'System Level'), ('ORG', 'Organization Specific')], default='ORG', max_length=10)),
                ('is_active', models.BooleanField(default=True)),
                ('version', models.PositiveIntegerField(default=1)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('application', models.ForeignKey(blank=True, help_text='Application this prompt belongs to (for ORG type prompts).', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='prompts', to='core.registeredapplication')),
            ],
            options={
                'verbose_name': 'Base Prompt',
                'verbose_name_plural': 'Base Prompts',
                'ordering': ['prompt_type', 'application__organization__name', 'application__name', 'title'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('action_type', models.CharField(choices=[('CREATE', 'Create'), ('UPDATE', 'Update'), ('DELETE', 'Delete'), ('READ', 'Read'), ('LOGIN_SUCCESS', 'Login Success'), ('LOGIN_FAILED', 'Login Failed'), ('LOGOUT', 'Logout'), ('API_CALL_SUCCESS', 'API Call Success'), ('API_CALL_FAILED', 'API Call Failed'), ('PASSWORD_RESET_REQUEST', 'Password Reset Request'), ('PASSWORD_RESET_COMPLETE', 'Password Reset Complete'), ('PERMISSION_CHANGE', 'Permission Change'), ('SYSTEM_EVENT', 'System Event')], help_text='Type of action performed.', max_length=30)),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='When the action occurred (timezone-aware if USE_TZ=True).')),
                ('object_id_int', models.IntegerField(blank=True, help_text='The integer PK of the object (if applicable).', null=True)),
                ('object_id_uuid', models.UUIDField(blank=True, help_text='The UUID PK of the object (if applicable).', null=True)),
                ('object_repr', models.CharField(blank=True, help_text='A string representation of the object at the time of logging.', max_length=255, null=True)),
                ('changes_json', models.JSONField(blank=True, help_text='JSON representation of changes made (e.g., for UPDATE actions). Field diffs.', null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of the request origin.', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='User agent string of the client.', null=True)),
                ('additional_info', models.TextField(blank=True, help_text='Any other relevant information for this log entry (e.g., API endpoint called, parameters).', null=True)),
                ('content_type', models.ForeignKey(blank=True, help_text='The model of the object that was affected.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(blank=True, help_text='User who performed the action, or system if null.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Audit Log',
                'verbose_name_plural': 'Audit Logs',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['content_type', 'object_id_int'], name='core_auditl_content_19e622_idx'), models.Index(fields=['content_type', 'object_id_uuid'], name='core_auditl_content_d1e44b_idx'), models.Index(fields=['user', 'action_type'], name='core_auditl_user_id_1a065d_idx')],
            },
        ),
    ]
